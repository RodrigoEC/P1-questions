{
  "files": {
    "public_tests.py": {
      "category": "public",
      "data": "import unittest\nimport sys\n\nundertest = __import__(sys.argv[-1].split(\".py\")[0])\ninverte_dicionario = getattr(undertest, 'inverte_dicionario', None)\n\nclass PublicTests(unittest.TestCase):\n\n    def test_exemplo(self):\n        m = {\"a\": 2, \"b\": 3, \"c\": 2}\n        assert inverte_dicionario(m) == {\n          2: [\"a\", \"c\"],\n          3: [\"b\"]\n        }\n\nif __name__ == '__main__':\n    loader = unittest.TestLoader()\n    runner = unittest.TextTestRunner()\n    runner.run(loader.loadTestsFromModule(sys.modules[__name__]))\n",
      "name": "public_tests.py"
    },
    "inverte.py": {
      "category": "answer",
      "data": "# coding: utf-8\n# Aluno: Rodrigo Eloy Cavalcanti\n# Matr\u00edcula: 118210111\n# Inverte dicionario\n    \ndef ordem(lista):\n\tfor i in range(len(lista)-1, 0, -1):\n\t\tif lista[i] < lista[i-1]:\n\t\t\tlista[i-1], lista[i] = lista[i], lista[i-1]\n\t\telse:\n\t\t\tbreak\n\ndef meu_in(dic, ele):\n\tfor chave in dic.keys():\n\t\tif chave == ele:\n\t\t\treturn True\n\treturn False\n\ndef inverte_dicionario(dic):\n\tcache = {}\n\tfor chave, valor in dic.iteritems():\n\t\tif meu_in(cache, valor):\n\t\t\tcache[valor].append(chave)\n\t\t\tordem(cache[valor])\n\n\t\telse:\n\t\t\tcache[valor] = [chave]\n\n\treturn cache",
      "name": "inverte.py"
    }
  },
  "kind": "assignment",
  "name": null,
  "checksum": "121877f51f6a5e2215a7c0c36f064777",
  "iid": 6392644481581056,
  "activity_revision": "1.1.0"
}